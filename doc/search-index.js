var searchIndex = {};
searchIndex["reikna"] = {"doc":"A fast and lightweight math library","items":[[0,"func","reikna","Module for working with `Function`s",null,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",0,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",0,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",0,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",0,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",0,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",0,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",0,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",0,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",0,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"clone","alloc::boxed","",1,null],[11,"pointer","","",2,null],[11,"make_place","","",2,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",2,null],[11,"finalize","","",3,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",1,null],[11,"drop","","",2,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",3,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",3,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"ge","","",3,null],[11,"gt","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next_back","","",3,null],[11,"call_once","","",3,null],[11,"call_once","","",3,null],[11,"clone","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","alloc::arc","",4,null],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",5,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",5,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",5,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",5,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",5,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",5,null],[11,"deref","","",5,null],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",5,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",5,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",5,null],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",4,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",4,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",4,null],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",5,null],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",5,null],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"cmp","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",5,null],[11,"from","","",5,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"borrow","","",5,null],[11,"as_ref","","",5,null],[11,"deref","alloc::rc","",0,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",0,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",0,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",0,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",0,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",0,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",0,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",0,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",0,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",0,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",0,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",6,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",6,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",6,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",6,null],[11,"fmt","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",0,null],[11,"as_ref","","",0,null],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",7,{"inputs":[],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",7,{"inputs":[{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",7,null],[11,"from_box","","Converts a `Box&lt;[T]&gt;` into a `RawVec&lt;T&gt;`.",7,{"inputs":[{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",7,null],[11,"cap","","Gets the capacity of the allocation.",7,null],[11,"double","","Doubles the size of the type&#39;s backing allocation. This is common enough\nto want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",7,null],[11,"double_in_place","","Attempts to double the size of the type&#39;s backing allocation in place. This is common\nenough to want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",7,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",7,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",7,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",7,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",7,null],[11,"into_box","","Converts the entire buffer into `Box&lt;[T]&gt;`.",7,null],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",7,null],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",7,null],[3,"Rc","reikna::func","A reference-counted pointer type over an immutable value.",null,null],[6,"Function","","Type alias used to represent functions.",null,null],[0,"aliquot","reikna","Module for working with aliquot and divisor sums.",null,null],[5,"aliquot_sum","reikna::aliquot","Return the aliquot sum of a positive integer `n`,\nthat is, the sum of all of `n`&#39;s proper divisors.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"divisor_sum","","Return the divisor sum of a positive integer `n`,\nthat is, the sum of all of `n`&#39;s divisors.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"abundant_number","","Return `true` if `n` is an abundant number,\nthat is, a number whose aliquot sum is greater\nthan itself.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"perfect_number","","Return `true` if `n` is a perfect number,\nthat is, a number whose aliquot sum is equal\nto itself.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"deficient_number","","Return `true` if `n` is a deficient number,\nthat is, a number whose aliquot sum is less\nthan itself.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"superperfect_number","","Return `true` if `n` is a superperfect number,\nthat is, a number which satisfies",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"quasiperfect_number","","Return `true` if `n` is a quasiperfect number,\nthat is, a number whose aliquot sum is exactly\none greater than itself.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"amicable_number","","Return `true` if `n` is a member of an amicable pair,\nthat is, a pair of numbers whose aliquot sums equal\neach other.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"sociable_number","","Return `true` if `n` is a sociable number,\nthat is, a number whose aliquot sums form a\ncyclic pattern, e.g.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[0,"continued_fraction","reikna","Module for working with continued fractions.",null,null],[5,"square_root","reikna::continued_fraction","Return a `ContinuedFraction` representing the square root of `x`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"continuedfraction"}}],[5,"e","","Return a `ContinuedFraction` of the continued fraction representing\n`e` to `n` terms.",null,{"inputs":[{"name":"u64"}],"output":{"name":"continuedfraction"}}],[5,"expand_fraction_ntimes","","Expand the continued fraction `fraction` `n` times, storing\nthe result as a fraction in a double tuple of `u64`.",null,null],[5,"expand_fraction","","Expand the continued fraction `fraction` one time, storing\nthe result as a fraction in a double tuple of `u64`.",null,null],[5,"expand_f64_ntimes","","Expand the continued fraction `fraction` `n` times, storing\nthe result as an `f64`.",null,{"inputs":[{"name":"continuedfraction"},{"name":"u64"}],"output":{"name":"f64"}}],[5,"expand_f64","","Expand the continued fraction `fraction` one time, storing\nthe result as an `f64`.",null,{"inputs":[{"name":"continuedfraction"}],"output":{"name":"f64"}}],[5,"to_string","","Return a nicely formatted `String` of the continued fraction\n`fraction.",null,{"inputs":[{"name":"continuedfraction"}],"output":{"name":"string"}}],[6,"ContinuedFraction","","Type alias for continued fractions.",null,null],[0,"derivative","reikna","Module for working with derivatives.",null,null],[5,"nth_derivative","reikna::derivative","Return a `Function` estimating the `n`th derivative of `f`.",null,{"inputs":[{"name":"u64"},{"name":"function"}],"output":{"name":"function"}}],[5,"derivative","","Return a function estimating the first derivative of `f`.",null,{"inputs":[{"name":"function"}],"output":{"name":"function"}}],[5,"second_derivative","","Return a function estimating the second derivative of `f`.",null,{"inputs":[{"name":"function"}],"output":{"name":"function"}}],[5,"slope_at","","Estimate the value of the derivative of `f` at `x`",null,{"inputs":[{"name":"function"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"concavity_at","","Estimate the value of the second derivative of `f` at `x`",null,{"inputs":[{"name":"function"},{"name":"f64"}],"output":{"name":"f64"}}],[17,"EPSILON","","The value used for `h` in derivative estimates.",null,null],[0,"factor","reikna","Module for working with integer factorization.",null,null],[5,"gcd","reikna::factor","Find the GCD of `a` and `b` using the Euclidean algorithm.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"gcd_all","","Return the GCD of the set of integers",null,{"inputs":[{"name":"vec"}],"output":{"name":"u64"}}],[5,"coprime","","Return `true` if `a` and `b` are coprime.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"bool"}}],[5,"lcm","","Return the LCM of `a` and `b`.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"lcm_all","","Return the LCM of the set of integers",null,{"inputs":[{"name":"vec"}],"output":{"name":"u64"}}],[5,"perfect_square","","Return `true` if `n` is a perfect square.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"perfect_cube","","Return `true` if `n` is a perfect cube.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"rho","","Extract a factor of `val` using `entropy` as a seed\nvalue.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"quick_factorize_wsp","","Return a `Vec&lt;u64&gt;` of `value`&#39;s prime factorization,\nusing `sprimes` as a list of small primes;",null,{"inputs":[{"name":"u64"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"quick_factorize","","Return a `Vec&lt;u64&gt;` of `value`&#39;s prime factorization.",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[17,"GOOD_BYTES","","List of least significant bytes for values\nthat could be perfect squares.",null,null],[17,"MAX_SMALL_NUM","","The largest number considered &quot;small&quot; by `quick_factorize_wsp()`.",null,null],[0,"figurate","reikna","Module for generating various kinds of figurate numbers.",null,null],[5,"figurate","reikna::figurate","Return the `n`th figurate number with `s` sides",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"general_figurate","","Return the `n`th general figurate number with `s` sides",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"centered_figurate","","Return the `n`th centered figurate number with `s` sides",null,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64"}}],[5,"triangular_number","","Return the `n`th triangular number",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"square_number","","Return the `n`th square number",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"pentagonal_number","","Return the `n`th pentagonal number",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"hexagonal_number","","Return the `n`th hexagonal number",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"general_pentagonal_number","","Return the `n`th general pentagonal number",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[0,"integral","reikna","Module for working with integrals.",null,null],[5,"integrate_wp","reikna::integral","Estimate the value of the integral of `f` over `[a, b]` using\n `p` subintervals.",null,{"inputs":[{"name":"function"},{"name":"f64"},{"name":"f64"},{"name":"u64"}],"output":{"name":"f64"}}],[5,"integrate","","Estimate the value of the integral of `f` over `[a, b]`.",null,{"inputs":[{"name":"function"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"nth_integral","","Return a `Function` that estimates the `n`th integral of `f`, using a\n constant of `c` and a positive precision constant of `p`.",null,{"inputs":[{"name":"u64"},{"name":"function"},{"name":"f64"},{"name":"u64"}],"output":{"name":"function"}}],[5,"integral","","Return a `Function` that estimates the integral of `f`, using a\n constant of `c` and a positive precision constant of `p`.",null,{"inputs":[{"name":"function"},{"name":"f64"},{"name":"u64"}],"output":{"name":"function"}}],[17,"DEFAULT_PRECISION","","The default precision constant used in `integrate`.",null,null],[0,"partition","reikna","Module for working with the number theory partition function.",null,null],[5,"part_wc","reikna::partition","Calculate the partition function of `n` using `cache` to cache\npreviously calculated values.",null,{"inputs":[{"name":"i64"},{"name":"vec"}],"output":{"name":"u64"}}],[5,"part","","Calculate the partition function of `n`",null,{"inputs":[{"name":"i64"}],"output":{"name":"u64"}}],[17,"MAX_PART","","Max partition size the functions will calculate",null,null],[0,"prime","reikna","Module for working with prime numbers.",null,null],[3,"Bitset","reikna::prime","Simple bit set implementation for prime sieves",null,null],[5,"atkin","","Return a `Vec&lt;u64&gt;` of the primes in [1, max_u64] using the\nSieve of Atkin.",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[5,"eratosthenes","","Return a `Vec&lt;u64&gt;` of the primes in [1, max_u64] using the\nSieve of Eratosthenes.",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[5,"segmented_eratosthenes","","Return a `Vec&lt;u64&gt;` of the primes in [1, max] using a segmented\nSieve of Eratosthenes.",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[5,"nth_prime","","Return the Nth prime number, starting with `P0 = 2`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"prime_sieve","","Idiomatic prime sieve, returns a `Vec&lt;u64&gt;` of primes in [1, max].",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[5,"is_prime","","Return `true` if `value` is prime, and false if it is composite.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"factorize_wp","","Return a `Vec&lt;u64&gt;` of the value&#39;s factorization,\nusing the provided list of primes.",null,{"inputs":[{"name":"u64"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"factorize","","Return a `Vec&lt;u64&gt;` of the value&#39;s factorization",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[5,"next_prime","","Return the smallest prime number greater than `n`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[17,"S_SIEVE_SIZE","","Size of the segmented sieve segments in `segmented_eratosthenes()`",null,null],[11,"new","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"bitset"}}],[11,"one","","",8,null],[11,"read","","",8,null],[11,"set","","",8,null],[0,"prime_count","reikna","Module for working with the prime-counting function.",null,null],[5,"prime_count","reikna::prime_count","Return the number of prime numbers less than or equal to `x`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"prime_count_all","","Calculate the value of the prime-counting function for each\nvalue in `data`, and return a new `Vec&lt;u64&gt;` of the results.",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[17,"PI_SYMBOL","","Constant string of the uppercase Pi symbol,\noften used to represent the prime-counting function.",null,null],[0,"totient","reikna","Module for working with Euler&#39;s totient function.",null,null],[5,"totient","reikna::totient","Calculate the value of Euler&#39;s totient function for `n`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"totient_all","","Calculate the value of Euler&#39;s totient function for each\nvalue in `data`, and return a new `Vec&lt;u64&gt;` of the results.",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[17,"PHI_SYMBOL","","Constant string of the uppercase Phi symbol,\noften used to represent the totient function.",null,null],[14,"func!","reikna","Macro for creating a `Function`.",null,null],[14,"segmented_sieve!","","Macro representing the body of a segmented Sieve\nof Eratosthenes.",null,null]],"paths":[[3,"Rc"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Weak"],[3,"RawVec"],[3,"Bitset"]]};
initSearch(searchIndex);
